// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Camunda.Api.Client.CaseInstance;
using Refit;
using System.Threading.Tasks;
using Camunda.Api.Client.UserTask;
using Camunda.Api.Client.Batch;
using Camunda.Api.Client.ProcessInstance;
using Camunda.Api.Client.ProcessDefinition;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Camunda.Api.Client.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Camunda.Api.Client.CaseDefinition
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICaseDefinitionRestService : ICaseDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICaseDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<CaseDefinitionInfo>> ICaseDefinitionRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<CaseDefinitionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> ICaseDefinitionRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionInfo> ICaseDefinitionRestService.GetById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetById", new Type[] { typeof(string) });
            return (Task<CaseDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionInfo> ICaseDefinitionRestService.GetByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKey", new Type[] { typeof(string) });
            return (Task<CaseDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionInfo> ICaseDefinitionRestService.GetByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<CaseDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionDiagram> ICaseDefinitionRestService.GetXmlById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlById", new Type[] { typeof(string) });
            return (Task<CaseDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionDiagram> ICaseDefinitionRestService.GetXmlByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKey", new Type[] { typeof(string) });
            return (Task<CaseDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseDefinitionDiagram> ICaseDefinitionRestService.GetXmlByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<CaseDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> ICaseDefinitionRestService.GetDiagramById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramById", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> ICaseDefinitionRestService.GetDiagramByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKey", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> ICaseDefinitionRestService.GetDiagramByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseInstanceInfo> ICaseDefinitionRestService.CreateCaseInstanceById(string id, CreateCaseInstance parameters)
        {
            var arguments = new object[] { id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateCaseInstanceById", new Type[] { typeof(string), typeof(CreateCaseInstance) });
            return (Task<CaseInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseInstanceInfo> ICaseDefinitionRestService.CreateCaseInstanceByKey(string key, CreateCaseInstance parameters)
        {
            var arguments = new object[] { key, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateCaseInstanceByKey", new Type[] { typeof(string), typeof(CreateCaseInstance) });
            return (Task<CaseInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseInstanceInfo> ICaseDefinitionRestService.CreateCaseInstanceByKeyAndTenantId(string key, string tenantId, CreateCaseInstance parameters)
        {
            var arguments = new object[] { key, tenantId, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateCaseInstanceByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(CreateCaseInstance) });
            return (Task<CaseInstanceInfo>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.CaseExecution
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICaseExecutionRestService : ICaseExecutionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICaseExecutionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<CaseExecutionInfo>> ICaseExecutionRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<CaseExecutionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> ICaseExecutionRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseExecutionInfo> ICaseExecutionRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<CaseExecutionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseExecutionRestService.StartExecution(string id, CaseExecutionStart start)
        {
            var arguments = new object[] { id, start };
            var func = requestBuilder.BuildRestResultFuncForMethod("StartExecution", new Type[] { typeof(string), typeof(CaseExecutionStart) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseExecutionRestService.CompleteExecution(string id, CaseExecutionComplete complete)
        {
            var arguments = new object[] { id, complete };
            var func = requestBuilder.BuildRestResultFuncForMethod("CompleteExecution", new Type[] { typeof(string), typeof(CaseExecutionComplete) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseExecutionRestService.DisableExecution(string id, CaseExecutionDisable disable)
        {
            var arguments = new object[] { id, disable };
            var func = requestBuilder.BuildRestResultFuncForMethod("DisableExecution", new Type[] { typeof(string), typeof(CaseExecutionDisable) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseExecutionRestService.ReEnableExecution(string id, CaseExecutionReEnable reenable)
        {
            var arguments = new object[] { id, reenable };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReEnableExecution", new Type[] { typeof(string), typeof(CaseExecutionReEnable) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseExecutionRestService.TerminateExecution(string id, CaseExecutionTerminate terminate)
        {
            var arguments = new object[] { id, terminate };
            var func = requestBuilder.BuildRestResultFuncForMethod("TerminateExecution", new Type[] { typeof(string), typeof(CaseExecutionTerminate) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.CaseInstance
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICaseInstanceRestService : ICaseInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICaseInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> ICaseInstanceRestService.GetVariables(string id, bool? deserializeValues)
        {
            var arguments = new object[] { id, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariables", new Type[] { typeof(string), typeof(bool?) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<VariableValue> ICaseInstanceRestService.GetVariableValue(string id, string varName, bool? deserializeValue)
        {
            var arguments = new object[] { id, varName, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariableValue", new Type[] { typeof(string), typeof(string), typeof(bool?) });
            return (Task<VariableValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> ICaseInstanceRestService.GetBinaryVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryVariable", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.ModifyVariables(string id, PatchVariables patch)
        {
            var arguments = new object[] { id, patch };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyVariables", new Type[] { typeof(string), typeof(PatchVariables) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.UpdateVariable(string id, string varName, VariableValue value)
        {
            var arguments = new object[] { id, varName, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateVariable", new Type[] { typeof(string), typeof(string), typeof(VariableValue) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.SetBinaryVariable(string id, string varName, BinaryDataContent data, ValueTypeContent valueType)
        {
            var arguments = new object[] { id, varName, data, valueType };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetBinaryVariable", new Type[] { typeof(string), typeof(string), typeof(BinaryDataContent), typeof(ValueTypeContent) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.DeleteVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteVariable", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CaseInstanceInfo> ICaseInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<CaseInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<CaseInstanceInfo>> ICaseInstanceRestService.GetList(CaseInstanceQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(CaseInstanceQuery), typeof(int?), typeof(int?) });
            return (Task<List<CaseInstanceInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> ICaseInstanceRestService.GetListCount(CaseInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(CaseInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.Complete(string id, ChangeCaseInstanceState completeCaseInstance)
        {
            var arguments = new object[] { id, completeCaseInstance };
            var func = requestBuilder.BuildRestResultFuncForMethod("Complete", new Type[] { typeof(string), typeof(ChangeCaseInstanceState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.Close(string id, ChangeCaseInstanceState closeCaseInstance)
        {
            var arguments = new object[] { id, closeCaseInstance };
            var func = requestBuilder.BuildRestResultFuncForMethod("Close", new Type[] { typeof(string), typeof(ChangeCaseInstanceState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICaseInstanceRestService.Terminate(string id, ChangeCaseInstanceState terminateCaseInstance)
        {
            var arguments = new object[] { id, terminateCaseInstance };
            var func = requestBuilder.BuildRestResultFuncForMethod("Terminate", new Type[] { typeof(string), typeof(ChangeCaseInstanceState) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.DecisionDefinition
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDecisionDefinitionRestService : IDecisionDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDecisionDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<DecisionDefinitionInfo>> IDecisionDefinitionRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<DecisionDefinitionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IDecisionDefinitionRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionInfo> IDecisionDefinitionRestService.GetById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetById", new Type[] { typeof(string) });
            return (Task<DecisionDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionInfo> IDecisionDefinitionRestService.GetByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKey", new Type[] { typeof(string) });
            return (Task<DecisionDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionInfo> IDecisionDefinitionRestService.GetByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<DecisionDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionDiagram> IDecisionDefinitionRestService.GetXmlById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlById", new Type[] { typeof(string) });
            return (Task<DecisionDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionDiagram> IDecisionDefinitionRestService.GetXmlByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKey", new Type[] { typeof(string) });
            return (Task<DecisionDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DecisionDefinitionDiagram> IDecisionDefinitionRestService.GetXmlByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<DecisionDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IDecisionDefinitionRestService.GetDiagramById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramById", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IDecisionDefinitionRestService.GetDiagramByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKey", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IDecisionDefinitionRestService.GetDiagramByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Dictionary<string, VariableValue>>> IDecisionDefinitionRestService.EvaluateById(string id, EvaluateDecision parameters)
        {
            var arguments = new object[] { id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("EvaluateById", new Type[] { typeof(string), typeof(EvaluateDecision) });
            return (Task<List<Dictionary<string, VariableValue>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Dictionary<string, VariableValue>>> IDecisionDefinitionRestService.EvaluateByKey(string key, EvaluateDecision parameters)
        {
            var arguments = new object[] { key, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("EvaluateByKey", new Type[] { typeof(string), typeof(EvaluateDecision) });
            return (Task<List<Dictionary<string, VariableValue>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<Dictionary<string, VariableValue>>> IDecisionDefinitionRestService.EvaluateByKeyAndTenantId(string key, string tenantId, EvaluateDecision parameters)
        {
            var arguments = new object[] { key, tenantId, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("EvaluateByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(EvaluateDecision) });
            return (Task<List<Dictionary<string, VariableValue>>>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Deployment
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDeploymentRestService : IDeploymentRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDeploymentRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<DeploymentInfo>> IDeploymentRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<DeploymentInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IDeploymentRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DeploymentInfo> IDeploymentRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<DeploymentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DeploymentInfo> IDeploymentRestService.Redeploy(string id, RedeploymentInfo redeployment)
        {
            var arguments = new object[] { id, redeployment };
            var func = requestBuilder.BuildRestResultFuncForMethod("Redeploy", new Type[] { typeof(string), typeof(RedeploymentInfo) });
            return (Task<DeploymentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IDeploymentRestService.Delete(string id, bool cascade, bool skipCustomListeners, bool skipIoMappings)
        {
            var arguments = new object[] { id, cascade, skipCustomListeners, skipIoMappings };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string), typeof(bool), typeof(bool), typeof(bool) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<DeploymentResourceInfo>> IDeploymentRestService.GetDeploymentResources(string deploymentId)
        {
            var arguments = new object[] { deploymentId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDeploymentResources", new Type[] { typeof(string) });
            return (Task<List<DeploymentResourceInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DeploymentResourceInfo> IDeploymentRestService.GetDeploymentResource(string deploymentId, string resourceId)
        {
            var arguments = new object[] { deploymentId, resourceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDeploymentResource", new Type[] { typeof(string), typeof(string) });
            return (Task<DeploymentResourceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IDeploymentRestService.GetDeploymentResourceData(string deploymentId, string resourceId)
        {
            var arguments = new object[] { deploymentId, resourceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDeploymentResourceData", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<DeploymentInfo> IDeploymentRestService.Create(HttpContentMultipartItem<PlainTextContent> deploymentName, HttpContentMultipartItem<PlainTextContent> enableDuplicateFiltering, HttpContentMultipartItem<PlainTextContent> deployChangedOnly, HttpContentMultipartItem<PlainTextContent> deploymentSource, HttpContentMultipartItem<PlainTextContent> tenantId, HttpContentMultipartItem<ResourceDataContent>[] resources)
        {
            var arguments = new object[] { deploymentName, enableDuplicateFiltering, deployChangedOnly, deploymentSource, tenantId, resources };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(HttpContentMultipartItem<PlainTextContent>), typeof(HttpContentMultipartItem<PlainTextContent>), typeof(HttpContentMultipartItem<PlainTextContent>), typeof(HttpContentMultipartItem<PlainTextContent>), typeof(HttpContentMultipartItem<PlainTextContent>), typeof(HttpContentMultipartItem<ResourceDataContent>[]) });
            return (Task<DeploymentInfo>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Execution
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIExecutionRestService : IExecutionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIExecutionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<ExecutionInfo>> IExecutionRestService.GetList(ExecutionQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(ExecutionQuery), typeof(int?), typeof(int?) });
            return (Task<List<ExecutionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IExecutionRestService.GetListCount(ExecutionQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(ExecutionQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ExecutionInfo> IExecutionRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<ExecutionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<EventSubscription> IExecutionRestService.GetMessageEventSubscription(string id, string messageName)
        {
            var arguments = new object[] { id, messageName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMessageEventSubscription", new Type[] { typeof(string), typeof(string) });
            return (Task<EventSubscription>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.TriggerMessageEventSubscription(string id, string messageName, ExecutionTrigger trigger)
        {
            var arguments = new object[] { id, messageName, trigger };
            var func = requestBuilder.BuildRestResultFuncForMethod("TriggerMessageEventSubscription", new Type[] { typeof(string), typeof(string), typeof(ExecutionTrigger) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.TriggerExecution(string id, ExecutionTrigger trigger)
        {
            var arguments = new object[] { id, trigger };
            var func = requestBuilder.BuildRestResultFuncForMethod("TriggerExecution", new Type[] { typeof(string), typeof(ExecutionTrigger) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.DeleteLocalVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteLocalVariable", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<VariableValue> IExecutionRestService.GetLocalVariable(string id, string varName, bool deserializeValue)
        {
            var arguments = new object[] { id, varName, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLocalVariable", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<VariableValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IExecutionRestService.GetLocalVariables(string id, bool deserializeValues)
        {
            var arguments = new object[] { id, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLocalVariables", new Type[] { typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IExecutionRestService.GetBinaryLocalVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryLocalVariable", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.SetBinaryLocalVariable(string id, string varName, BinaryDataContent data, ValueTypeContent valueType)
        {
            var arguments = new object[] { id, varName, data, valueType };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetBinaryLocalVariable", new Type[] { typeof(string), typeof(string), typeof(BinaryDataContent), typeof(ValueTypeContent) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.ModifyLocalVariables(string id, PatchVariables patch)
        {
            var arguments = new object[] { id, patch };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyLocalVariables", new Type[] { typeof(string), typeof(PatchVariables) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExecutionRestService.PutLocalVariable(string id, string varName, VariableValue variable)
        {
            var arguments = new object[] { id, varName, variable };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutLocalVariable", new Type[] { typeof(string), typeof(string), typeof(VariableValue) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.ExternalTask
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIExternalTaskRestService : IExternalTaskRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIExternalTaskRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ExternalTaskInfo> IExternalTaskRestService.Get(string externalTaskId)
        {
            var arguments = new object[] { externalTaskId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<ExternalTaskInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<ExternalTaskInfo>> IExternalTaskRestService.GetList(ExternalTaskQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(ExternalTaskQuery), typeof(int?), typeof(int?) });
            return (Task<List<ExternalTaskInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IExternalTaskRestService.GetListCount(ExternalTaskQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(ExternalTaskQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<LockedExternalTask>> IExternalTaskRestService.FetchAndLock(FetchExternalTasks fetching)
        {
            var arguments = new object[] { fetching };
            var func = requestBuilder.BuildRestResultFuncForMethod("FetchAndLock", new Type[] { typeof(FetchExternalTasks) });
            return (Task<List<LockedExternalTask>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.SetRetries(string externalTaskId, RetriesInfo retries)
        {
            var arguments = new object[] { externalTaskId, retries };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetRetries", new Type[] { typeof(string), typeof(RetriesInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.SetPriority(string externalTaskId, PriorityInfo priority)
        {
            var arguments = new object[] { externalTaskId, priority };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetPriority", new Type[] { typeof(string), typeof(PriorityInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.Complete(string externalTaskId, CompleteExternalTask completeExternalTask)
        {
            var arguments = new object[] { externalTaskId, completeExternalTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("Complete", new Type[] { typeof(string), typeof(CompleteExternalTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.HandleBpmnError(string externalTaskId, ExternalTaskBpmnError externalTaskBpmnError)
        {
            var arguments = new object[] { externalTaskId, externalTaskBpmnError };
            var func = requestBuilder.BuildRestResultFuncForMethod("HandleBpmnError", new Type[] { typeof(string), typeof(ExternalTaskBpmnError) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.HandleFailure(string externalTaskId, ExternalTaskFailure externalTaskFailure)
        {
            var arguments = new object[] { externalTaskId, externalTaskFailure };
            var func = requestBuilder.BuildRestResultFuncForMethod("HandleFailure", new Type[] { typeof(string), typeof(ExternalTaskFailure) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.Unlock(string externalTaskId)
        {
            var arguments = new object[] { externalTaskId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Unlock", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IExternalTaskRestService.ExtendLock(string externalTaskId, ExternalTaskExtendLock externalTaskExtendLock)
        {
            var arguments = new object[] { externalTaskId, externalTaskExtendLock };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExtendLock", new Type[] { typeof(string), typeof(ExternalTaskExtendLock) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Filter
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIFilterRestService : IFilterRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIFilterRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<FilterInfo.Response>> IFilterRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<FilterInfo.Response>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IFilterRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FilterInfo.Response> IFilterRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<FilterInfo.Response>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FilterInfo.Response> IFilterRestService.Create(FilterInfo.Request filterInfo)
        {
            var arguments = new object[] { filterInfo };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(FilterInfo.Request) });
            return (Task<FilterInfo.Response>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFilterRestService.Delete(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFilterRestService.Update(string id, FilterInfo.Request filterInfo)
        {
            var arguments = new object[] { id, filterInfo };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(FilterInfo.Request) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserTaskInfo> IFilterRestService.Execute(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Execute", new Type[] { typeof(string) });
            return (Task<UserTaskInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<UserTaskInfo>> IFilterRestService.ExecuteList(string id, int firstResult, int maxResults, TaskQuery query)
        {
            var arguments = new object[] { id, firstResult, maxResults, query };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExecuteList", new Type[] { typeof(string), typeof(int), typeof(int), typeof(TaskQuery) });
            return (Task<List<UserTaskInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IFilterRestService.ExecuteCount(string id, TaskQuery query)
        {
            var arguments = new object[] { id, query };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExecuteCount", new Type[] { typeof(string), typeof(TaskQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Group
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGroupRestService : IGroupRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGroupRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<GroupInfo>> IGroupRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<GroupInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IGroupRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<GroupInfo> IGroupRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<GroupInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IGroupRestService.Create(GroupInfo group)
        {
            var arguments = new object[] { group };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(GroupInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IGroupRestService.Update(string id, GroupInfo group)
        {
            var arguments = new object[] { id, group };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(GroupInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IGroupRestService.Delete(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IGroupRestService.AddMember(string id, string userId)
        {
            var arguments = new object[] { id, userId };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddMember", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IGroupRestService.RemoveMember(string id, string userId)
        {
            var arguments = new object[] { id, userId };
            var func = requestBuilder.BuildRestResultFuncForMethod("RemoveMember", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricActivityInstanceRestService : IHistoricActivityInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricActivityInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricActivityInstance> IHistoricActivityInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricActivityInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricActivityInstance>> IHistoricActivityInstanceRestService.GetList(HistoricActivityInstanceQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricActivityInstanceQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricActivityInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricActivityInstanceRestService.GetListCount(HistoricActivityInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricActivityInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricCaseActivityInstanceRestService : IHistoricCaseActivityInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricCaseActivityInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricCaseActivityInstance> IHistoricCaseActivityInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricCaseActivityInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricCaseActivityInstance>> IHistoricCaseActivityInstanceRestService.GetList(string caseInstanceId, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { caseInstanceId, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(string), typeof(int?), typeof(int?) });
            return (Task<List<HistoricCaseActivityInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricCaseActivityInstanceRestService.GetListCount(string caseInstanceId)
        {
            var arguments = new object[] { caseInstanceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(string) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricCaseDefinitionRestService : IHistoricCaseDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricCaseDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<HistoricCaseDefinitionStatisticsResult>> IHistoricCaseDefinitionRestService.GetActivityStatistics(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivityStatistics", new Type[] { typeof(string) });
            return (Task<List<HistoricCaseDefinitionStatisticsResult>>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricCaseInstanceRestService : IHistoricCaseInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricCaseInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricCaseInstance> IHistoricCaseInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricCaseInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricCaseInstance>> IHistoricCaseInstanceRestService.GetList(HistoricCaseInstanceQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricCaseInstanceQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricCaseInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricCaseInstanceRestService.GetListCount(HistoricCaseInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricCaseInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricDecisionInstanceRestService : IHistoricDecisionInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricDecisionInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricDecisionInstance> IHistoricDecisionInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricDecisionInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricDecisionInstance>> IHistoricDecisionInstanceRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<HistoricDecisionInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricDecisionInstanceRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricDetailRestService : IHistoricDetailRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricDetailRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricDetail> IHistoricDetailRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricDetail>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricDetail>> IHistoricDetailRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<HistoricDetail>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricDetailRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IHistoricDetailRestService.GetData(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetData", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricExternalTaskLogRestService : IHistoricExternalTaskLogRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricExternalTaskLogRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<HistoricExternalTaskLog>> IHistoricExternalTaskLogRestService.GetList(HistoricExternalTaskLogQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricExternalTaskLogQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricExternalTaskLog>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricExternalTaskLogRestService.GetListCount(HistoricExternalTaskLogQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricExternalTaskLogQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HistoricExternalTaskLog> IHistoricExternalTaskLogRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricExternalTaskLog>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IHistoricExternalTaskLogRestService.GetErrorDetails(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetErrorDetails", new Type[] { typeof(string) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricIncidentRestService : IHistoricIncidentRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricIncidentRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<HistoricIncident>> IHistoricIncidentRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<HistoricIncident>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricIncidentRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricJobLogRestService : IHistoricJobLogRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricJobLogRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricJobLog> IHistoricJobLogRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricJobLog>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricJobLog>> IHistoricJobLogRestService.GetList(HistoricJobLogQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricJobLogQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricJobLog>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricJobLogRestService.GetListCount(HistoricJobLogQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricJobLogQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IHistoricJobLogRestService.GetStacktrace(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStacktrace", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricProcessDefinitionRestService : IHistoricProcessDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricProcessDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<HistoricActivityStatisticsResult>> IHistoricProcessDefinitionRestService.GetHistoricActivityStatistics(string id, QueryDictionary query)
        {
            var arguments = new object[] { id, query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetHistoricActivityStatistics", new Type[] { typeof(string), typeof(QueryDictionary) });
            return (Task<List<HistoricActivityStatisticsResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<CleanableProcessInstanceReportResult>> IHistoricProcessDefinitionRestService.GetCleanableProcessInstanceReport(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCleanableProcessInstanceReport", new Type[] { typeof(QueryDictionary) });
            return (Task<List<CleanableProcessInstanceReportResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricProcessDefinitionRestService.GetCleanableProcessInstanceReportCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCleanableProcessInstanceReportCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricProcessInstanceRestService : IHistoricProcessInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricProcessInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricProcessInstance> IHistoricProcessInstanceRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<HistoricProcessInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricProcessInstance>> IHistoricProcessInstanceRestService.GetList(HistoricProcessInstanceQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricProcessInstanceQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricProcessInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricProcessInstanceRestService.GetListCount(HistoricProcessInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricProcessInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IHistoricProcessInstanceRestService.Delete(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<DurationReportResult>> IHistoricProcessInstanceRestService.GetDurationReport(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDurationReport", new Type[] { typeof(QueryDictionary) });
            return (Task<List<DurationReportResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BatchInfo> IHistoricProcessInstanceRestService.DeleteAsync(DeleteHistoricProcessInstances deleteHistoricProcessInstances)
        {
            var arguments = new object[] { deleteHistoricProcessInstances };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(DeleteHistoricProcessInstances) });
            return (Task<BatchInfo>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricUserTaskRestService : IHistoricUserTaskRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricUserTaskRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<HistoricTask>> IHistoricUserTaskRestService.GetList(HistoricTaskQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricTaskQuery), typeof(int?), typeof(int?) });
            return (Task<List<HistoricTask>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricUserTaskRestService.GetListCount(HistoricTaskQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricTaskQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<DurationReportResult>> IHistoricUserTaskRestService.GetDurationReport(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDurationReport", new Type[] { typeof(QueryDictionary) });
            return (Task<List<DurationReportResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<CountReportResult>> IHistoricUserTaskRestService.GetCountReport(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCountReport", new Type[] { typeof(QueryDictionary) });
            return (Task<List<CountReportResult>>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.History
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHistoricVariableInstanceRestService : IHistoricVariableInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHistoricVariableInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<HistoricVariableInstance> IHistoricVariableInstanceRestService.Get(string id, bool deserializeValue)
        {
            var arguments = new object[] { id, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string), typeof(bool) });
            return (Task<HistoricVariableInstance>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<HistoricVariableInstance>> IHistoricVariableInstanceRestService.GetList(HistoricVariableInstanceQuery query, int? firstResult, int? maxResults, bool deserializeValues)
        {
            var arguments = new object[] { query, firstResult, maxResults, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(HistoricVariableInstanceQuery), typeof(int?), typeof(int?), typeof(bool) });
            return (Task<List<HistoricVariableInstance>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IHistoricVariableInstanceRestService.GetListCount(HistoricVariableInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(HistoricVariableInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IHistoricVariableInstanceRestService.GetBinaryVariable(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryVariable", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Identity
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIdentityRestService : IIdentityRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIdentityRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IdentityGroupMembership> IIdentityRestService.GetMembership(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetMembership", new Type[] { typeof(QueryDictionary) });
            return (Task<IdentityGroupMembership>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<IdentityVerifiedUser> IIdentityRestService.Verify(IdentityUserCredentials credentials)
        {
            var arguments = new object[] { credentials };
            var func = requestBuilder.BuildRestResultFuncForMethod("Verify", new Type[] { typeof(IdentityUserCredentials) });
            return (Task<IdentityVerifiedUser>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Incident
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIncidentRestService : IIncidentRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIncidentRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<IncidentInfo>> IIncidentRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<IncidentInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IIncidentRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.JobDefinition
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIJobDefinitionRestService : IJobDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIJobDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<JobDefinitionInfo> IJobDefinitionRestService.Get(string jobDefinitionId)
        {
            var arguments = new object[] { jobDefinitionId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<JobDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<JobDefinitionInfo>> IJobDefinitionRestService.GetList(JobDefinitionQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(JobDefinitionQuery), typeof(int?), typeof(int?) });
            return (Task<List<JobDefinitionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IJobDefinitionRestService.GetListCount(JobDefinitionQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(JobDefinitionQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobDefinitionRestService.UpdateSuspensionState(JobDefinitionSuspensionState state)
        {
            var arguments = new object[] { state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionState", new Type[] { typeof(JobDefinitionSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobDefinitionRestService.UpdateSuspensionStateForId(string jobDefinitionId, SuspensionState suspensionState)
        {
            var arguments = new object[] { jobDefinitionId, suspensionState };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateForId", new Type[] { typeof(string), typeof(SuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobDefinitionRestService.SetJobRetries(string jobDefinitionId, RetriesInfo retries)
        {
            var arguments = new object[] { jobDefinitionId, retries };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobRetries", new Type[] { typeof(string), typeof(RetriesInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobDefinitionRestService.SetJobPriority(string jobDefinitionId, JobDefinitionPriority priority)
        {
            var arguments = new object[] { jobDefinitionId, priority };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobPriority", new Type[] { typeof(string), typeof(JobDefinitionPriority) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Job
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIJobRestService : IJobRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIJobRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<JobInfo> IJobRestService.Get(string jobId)
        {
            var arguments = new object[] { jobId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<JobInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<JobInfo>> IJobRestService.GetList(JobQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(JobQuery), typeof(int?), typeof(int?) });
            return (Task<List<JobInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IJobRestService.GetListCount(JobQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(JobQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IJobRestService.GetStacktrace(string jobId)
        {
            var arguments = new object[] { jobId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStacktrace", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.ExecuteJob(string jobId)
        {
            var arguments = new object[] { jobId };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExecuteJob", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.SetJobDuedate(string jobId, JobDuedateInfo duedate)
        {
            var arguments = new object[] { jobId, duedate };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobDuedate", new Type[] { typeof(string), typeof(JobDuedateInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.UpdateSuspensionStateForId(string jobId, SuspensionState state)
        {
            var arguments = new object[] { jobId, state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateForId", new Type[] { typeof(string), typeof(SuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.UpdateSuspensionState(JobSuspensionState state)
        {
            var arguments = new object[] { state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionState", new Type[] { typeof(JobSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.SetJobPriority(string jobId, PriorityInfo priority)
        {
            var arguments = new object[] { jobId, priority };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobPriority", new Type[] { typeof(string), typeof(PriorityInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.SetJobRetries(string jobId, RetriesInfo retries)
        {
            var arguments = new object[] { jobId, retries };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobRetries", new Type[] { typeof(string), typeof(RetriesInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IJobRestService.DeleteJob(string jobId)
        {
            var arguments = new object[] { jobId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteJob", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BatchInfo> IJobRestService.SetJobRetriesAsync(JobRetries retries)
        {
            var arguments = new object[] { retries };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetJobRetriesAsync", new Type[] { typeof(JobRetries) });
            return (Task<BatchInfo>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Message
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIMessageRestService : IMessageRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIMessageRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<CorrelationResult>> IMessageRestService.DeliverMessage(CorrelationMessage message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeliverMessage", new Type[] { typeof(CorrelationMessage) });
            return (Task<List<CorrelationResult>>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Migration
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIMigrationRestService : IMigrationRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIMigrationRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<MigrationPlan> IMigrationRestService.Generate(MigrationPlanGeneration request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Generate", new Type[] { typeof(MigrationPlanGeneration) });
            return (Task<MigrationPlan>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<MigrationPlanReport> IMigrationRestService.Validate(MigrationPlan plan)
        {
            var arguments = new object[] { plan };
            var func = requestBuilder.BuildRestResultFuncForMethod("Validate", new Type[] { typeof(MigrationPlan) });
            return (Task<MigrationPlanReport>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IMigrationRestService.Execute(MigrationExecution request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Execute", new Type[] { typeof(MigrationExecution) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BatchInfo> IMigrationRestService.ExecuteAsync(MigrationExecution request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExecuteAsync", new Type[] { typeof(MigrationExecution) });
            return (Task<BatchInfo>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.ProcessDefinition
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProcessDefinitionRestService : IProcessDefinitionRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProcessDefinitionRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<ProcessDefinitionInfo>> IProcessDefinitionRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<ProcessDefinitionInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IProcessDefinitionRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<ProcessDefinitionStatisticsResult>> IProcessDefinitionRestService.GetProcessInstanceStatistics(bool failedJobs, bool? incidents, string incidentsForType)
        {
            var arguments = new object[] { failedJobs, incidents, incidentsForType };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProcessInstanceStatistics", new Type[] { typeof(bool), typeof(bool?), typeof(string) });
            return (Task<List<ProcessDefinitionStatisticsResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.Delete(string id, bool cascade, bool skipCustomListeners, bool skipIoMappings)
        {
            var arguments = new object[] { id, cascade, skipCustomListeners, skipIoMappings };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string), typeof(bool), typeof(bool), typeof(bool) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.DeleteByKey(string key, bool cascade, bool skipCustomListeners, bool skipIoMappings)
        {
            var arguments = new object[] { key, cascade, skipCustomListeners, skipIoMappings };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteByKey", new Type[] { typeof(string), typeof(bool), typeof(bool), typeof(bool) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.DeleteByKeyAndTenantId(string key, string tenantId, bool cascade, bool skipCustomListeners, bool skipIoMappings)
        {
            var arguments = new object[] { key, tenantId, cascade, skipCustomListeners, skipIoMappings };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(bool), typeof(bool), typeof(bool) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.UpdateSuspensionStateById(string id, ProcessDefinitionSuspensionState state)
        {
            var arguments = new object[] { id, state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateById", new Type[] { typeof(string), typeof(ProcessDefinitionSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.UpdateSuspensionStateByKey(string key, ProcessDefinitionSuspensionState state)
        {
            var arguments = new object[] { key, state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateByKey", new Type[] { typeof(string), typeof(ProcessDefinitionSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessDefinitionRestService.UpdateSuspensionStateByKeyAndTenantId(string key, string tenantId, ProcessDefinitionSuspensionState state)
        {
            var arguments = new object[] { key, tenantId, state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(ProcessDefinitionSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionInfo> IProcessDefinitionRestService.GetById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetById", new Type[] { typeof(string) });
            return (Task<ProcessDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionInfo> IProcessDefinitionRestService.GetByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKey", new Type[] { typeof(string) });
            return (Task<ProcessDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionInfo> IProcessDefinitionRestService.GetByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<ProcessDefinitionInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionDiagram> IProcessDefinitionRestService.GetXmlById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlById", new Type[] { typeof(string) });
            return (Task<ProcessDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionDiagram> IProcessDefinitionRestService.GetXmlByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKey", new Type[] { typeof(string) });
            return (Task<ProcessDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessDefinitionDiagram> IProcessDefinitionRestService.GetXmlByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetXmlByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<ProcessDefinitionDiagram>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IProcessDefinitionRestService.GetDiagramById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramById", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IProcessDefinitionRestService.GetDiagramByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKey", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IProcessDefinitionRestService.GetDiagramByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDiagramByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IProcessDefinitionRestService.GetFormVariablesById(string id, string variableNames, bool deserializeValues)
        {
            var arguments = new object[] { id, variableNames, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFormVariablesById", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IProcessDefinitionRestService.GetFormVariablesByKey(string key, string variableNames, bool deserializeValues)
        {
            var arguments = new object[] { key, variableNames, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFormVariablesByKey", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IProcessDefinitionRestService.GetFormVariablesByKeyAndTenantId(string key, string tenantId, string variableNames, bool deserializeValues)
        {
            var arguments = new object[] { key, tenantId, variableNames, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFormVariablesByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FormInfo> IProcessDefinitionRestService.GetStartFormById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStartFormById", new Type[] { typeof(string) });
            return (Task<FormInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FormInfo> IProcessDefinitionRestService.GetStartFormByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStartFormByKey", new Type[] { typeof(string) });
            return (Task<FormInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FormInfo> IProcessDefinitionRestService.GetStartFormByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStartFormByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<FormInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IProcessDefinitionRestService.GetRenderedFormById(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRenderedFormById", new Type[] { typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IProcessDefinitionRestService.GetRenderedFormByKey(string key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRenderedFormByKey", new Type[] { typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IProcessDefinitionRestService.GetRenderedFormByKeyAndTenantId(string key, string tenantId)
        {
            var arguments = new object[] { key, tenantId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRenderedFormByKeyAndTenantId", new Type[] { typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<StatisticsResult>> IProcessDefinitionRestService.GetActivityStatisticsById(string id, bool failedJobs, bool? incidents, string incidentsForType)
        {
            var arguments = new object[] { id, failedJobs, incidents, incidentsForType };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivityStatisticsById", new Type[] { typeof(string), typeof(bool), typeof(bool?), typeof(string) });
            return (Task<List<StatisticsResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<StatisticsResult>> IProcessDefinitionRestService.GetActivityStatisticsByKey(string key, bool failedJobs, bool? incidents, string incidentsForType)
        {
            var arguments = new object[] { key, failedJobs, incidents, incidentsForType };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivityStatisticsByKey", new Type[] { typeof(string), typeof(bool), typeof(bool?), typeof(string) });
            return (Task<List<StatisticsResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<StatisticsResult>> IProcessDefinitionRestService.GetActivityStatisticsByKeyAndTenantId(string key, string tenantId, bool failedJobs, bool? incidents, string incidentsForType)
        {
            var arguments = new object[] { key, tenantId, failedJobs, incidents, incidentsForType };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivityStatisticsByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(bool), typeof(bool?), typeof(string) });
            return (Task<List<StatisticsResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceInfo> IProcessDefinitionRestService.SubmitStartFormById(string id, SubmitStartForm parameters)
        {
            var arguments = new object[] { id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("SubmitStartFormById", new Type[] { typeof(string), typeof(SubmitStartForm) });
            return (Task<ProcessInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceInfo> IProcessDefinitionRestService.SubmitStartFormByKey(string key, SubmitStartForm parameters)
        {
            var arguments = new object[] { key, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("SubmitStartFormByKey", new Type[] { typeof(string), typeof(SubmitStartForm) });
            return (Task<ProcessInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceInfo> IProcessDefinitionRestService.SubmitStartFormByKeyAndTenantId(string key, string tenantId, SubmitStartForm parameters)
        {
            var arguments = new object[] { key, tenantId, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("SubmitStartFormByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(SubmitStartForm) });
            return (Task<ProcessInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceWithVariables> IProcessDefinitionRestService.StartProcessInstanceById(string id, StartProcessInstance parameters)
        {
            var arguments = new object[] { id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("StartProcessInstanceById", new Type[] { typeof(string), typeof(StartProcessInstance) });
            return (Task<ProcessInstanceWithVariables>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceWithVariables> IProcessDefinitionRestService.StartProcessInstanceByKey(string key, StartProcessInstance parameters)
        {
            var arguments = new object[] { key, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("StartProcessInstanceByKey", new Type[] { typeof(string), typeof(StartProcessInstance) });
            return (Task<ProcessInstanceWithVariables>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProcessInstanceWithVariables> IProcessDefinitionRestService.StartProcessInstanceByKeyAndTenantId(string key, string tenantId, StartProcessInstance parameters)
        {
            var arguments = new object[] { key, tenantId, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("StartProcessInstanceByKeyAndTenantId", new Type[] { typeof(string), typeof(string), typeof(StartProcessInstance) });
            return (Task<ProcessInstanceWithVariables>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.ProcessInstance
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProcessInstanceRestService : IProcessInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProcessInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ProcessInstanceInfo> IProcessInstanceRestService.Get(string processInstanceId)
        {
            var arguments = new object[] { processInstanceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<ProcessInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<ProcessInstanceInfo>> IProcessInstanceRestService.GetList(ProcessInstanceQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(ProcessInstanceQuery), typeof(int?), typeof(int?) });
            return (Task<List<ProcessInstanceInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IProcessInstanceRestService.GetListCount(ProcessInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(ProcessInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActivityInstanceInfo> IProcessInstanceRestService.GetActivityInstanceTree(string processInstanceId)
        {
            var arguments = new object[] { processInstanceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivityInstanceTree", new Type[] { typeof(string) });
            return (Task<ActivityInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.DeleteProcessInstance(string processInstanceId, bool skipCustomListeners, bool skipIoMappings, bool skipSubprocesses)
        {
            var arguments = new object[] { processInstanceId, skipCustomListeners, skipIoMappings, skipSubprocesses };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteProcessInstance", new Type[] { typeof(string), typeof(bool), typeof(bool), typeof(bool) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.UpdateSuspensionState(ProcessInstanceSuspensionState state)
        {
            var arguments = new object[] { state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionState", new Type[] { typeof(ProcessInstanceSuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.UpdateSuspensionStateForId(string processInstanceId, SuspensionState state)
        {
            var arguments = new object[] { processInstanceId, state };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateSuspensionStateForId", new Type[] { typeof(string), typeof(SuspensionState) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.ModifyProcessInstance(string processInstanceId, ProcessInstanceModification modification)
        {
            var arguments = new object[] { processInstanceId, modification };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyProcessInstance", new Type[] { typeof(string), typeof(ProcessInstanceModification) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BatchInfo> IProcessInstanceRestService.SetRetriesByProcess(JobRetriesByProcess retries)
        {
            var arguments = new object[] { retries };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetRetriesByProcess", new Type[] { typeof(JobRetriesByProcess) });
            return (Task<BatchInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BatchInfo> IProcessInstanceRestService.DeleteProcessInstanceAsync(DeleteProcessInstances deleteProcessInstances)
        {
            var arguments = new object[] { deleteProcessInstances };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteProcessInstanceAsync", new Type[] { typeof(DeleteProcessInstances) });
            return (Task<BatchInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.DeleteVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteVariable", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<VariableValue> IProcessInstanceRestService.GetVariable(string id, string varName, bool deserializeValue)
        {
            var arguments = new object[] { id, varName, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariable", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<VariableValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IProcessInstanceRestService.GetVariables(string id, bool deserializeValues)
        {
            var arguments = new object[] { id, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariables", new Type[] { typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IProcessInstanceRestService.GetBinaryVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryVariable", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.SetBinaryVariable(string id, string varName, BinaryDataContent data, ValueTypeContent valueType)
        {
            var arguments = new object[] { id, varName, data, valueType };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetBinaryVariable", new Type[] { typeof(string), typeof(string), typeof(BinaryDataContent), typeof(ValueTypeContent) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.ModifyVariables(string id, PatchVariables patch)
        {
            var arguments = new object[] { id, patch };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyVariables", new Type[] { typeof(string), typeof(PatchVariables) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IProcessInstanceRestService.PutVariable(string id, string varName, VariableValue variable)
        {
            var arguments = new object[] { id, varName, variable };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutVariable", new Type[] { typeof(string), typeof(string), typeof(VariableValue) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Signal
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedISignalRestService : ISignalRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedISignalRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task ISignalRestService.ThrowSignal(Signal signal)
        {
            var arguments = new object[] { signal };
            var func = requestBuilder.BuildRestResultFuncForMethod("ThrowSignal", new Type[] { typeof(Signal) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.Tenant
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITenantRestService : ITenantRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITenantRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<TenantInfo>> ITenantRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<TenantInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> ITenantRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ITenantRestService.Create(TenantInfo tenant)
        {
            var arguments = new object[] { tenant };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(TenantInfo) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.User
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserRestService : IUserRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<UserProfileInfo>> IUserRestService.GetList(QueryDictionary query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(QueryDictionary), typeof(int?), typeof(int?) });
            return (Task<List<UserProfileInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IUserRestService.GetListCount(QueryDictionary query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(QueryDictionary) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserProfileInfo> IUserRestService.GetProfile(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProfile", new Type[] { typeof(string) });
            return (Task<UserProfileInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserRestService.UpdateProfile(string id, UserProfileInfo profile)
        {
            var arguments = new object[] { id, profile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateProfile", new Type[] { typeof(string), typeof(UserProfileInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserRestService.UpdateCredentials(string id, UserCredentialsInfo credentials)
        {
            var arguments = new object[] { id, credentials };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateCredentials", new Type[] { typeof(string), typeof(UserCredentialsInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserRestService.Delete(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserRestService.Create(CreateUser createUser)
        {
            var arguments = new object[] { createUser };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(CreateUser) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.UserTask
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserTaskRestService : IUserTaskRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserTaskRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<UserTaskInfo> IUserTaskRestService.Get(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<UserTaskInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<UserTaskInfo>> IUserTaskRestService.GetList(TaskQuery query, int? firstResult, int? maxResults)
        {
            var arguments = new object[] { query, firstResult, maxResults };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(TaskQuery), typeof(int?), typeof(int?) });
            return (Task<List<UserTaskInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IUserTaskRestService.GetListCount(TaskQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(TaskQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FormInfo> IUserTaskRestService.GetForm(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetForm", new Type[] { typeof(string) });
            return (Task<FormInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.CompleteTask(string id, CompleteTask completeTask)
        {
            var arguments = new object[] { id, completeTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("CompleteTask", new Type[] { typeof(string), typeof(CompleteTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IUserTaskRestService.CompleteTaskAndFetchVariables(string id, CompleteTask completeTask)
        {
            var arguments = new object[] { id, completeTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("CompleteTaskAndFetchVariables", new Type[] { typeof(string), typeof(CompleteTask) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.ResolveTask(string id, ResolveTask resolveTask)
        {
            var arguments = new object[] { id, resolveTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("ResolveTask", new Type[] { typeof(string), typeof(ResolveTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.SubmitFormTask(string id, CompleteTask completeTask)
        {
            var arguments = new object[] { id, completeTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("SubmitFormTask", new Type[] { typeof(string), typeof(CompleteTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IUserTaskRestService.SubmitFormTaskAndFetchVariables(string id, CompleteTask completeTask)
        {
            var arguments = new object[] { id, completeTask };
            var func = requestBuilder.BuildRestResultFuncForMethod("SubmitFormTaskAndFetchVariables", new Type[] { typeof(string), typeof(CompleteTask) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IUserTaskRestService.GetRenderedForm(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRenderedForm", new Type[] { typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.ClaimTask(string id, UserInfo user)
        {
            var arguments = new object[] { id, user };
            var func = requestBuilder.BuildRestResultFuncForMethod("ClaimTask", new Type[] { typeof(string), typeof(UserInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.SetAssignee(string id, UserInfo user)
        {
            var arguments = new object[] { id, user };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetAssignee", new Type[] { typeof(string), typeof(UserInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.UnclaimTask(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("UnclaimTask", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DelegateTask(string id, UserInfo user)
        {
            var arguments = new object[] { id, user };
            var func = requestBuilder.BuildRestResultFuncForMethod("DelegateTask", new Type[] { typeof(string), typeof(UserInfo) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DeleteTask(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteTask", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IUserTaskRestService.GetFormVariables(string id, string variableNames, bool deserializeValues)
        {
            var arguments = new object[] { id, variableNames, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFormVariables", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.CreateTask(UserTask task)
        {
            var arguments = new object[] { task };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateTask", new Type[] { typeof(UserTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.UpdateTask(string id, UserTask task)
        {
            var arguments = new object[] { id, task };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateTask", new Type[] { typeof(string), typeof(UserTask) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<CommentInfo>> IUserTaskRestService.GetComments(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetComments", new Type[] { typeof(string) });
            return (Task<List<CommentInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CommentInfo> IUserTaskRestService.GetComment(string id, string commentId)
        {
            var arguments = new object[] { id, commentId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetComment", new Type[] { typeof(string), typeof(string) });
            return (Task<CommentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CommentInfo> IUserTaskRestService.CreateComment(string id, Comment comment)
        {
            var arguments = new object[] { id, comment };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateComment", new Type[] { typeof(string), typeof(Comment) });
            return (Task<CommentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<AttachmentInfo>> IUserTaskRestService.GetAttachments(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAttachments", new Type[] { typeof(string) });
            return (Task<List<AttachmentInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<AttachmentInfo> IUserTaskRestService.GetAttachment(string id, string attachmentId)
        {
            var arguments = new object[] { id, attachmentId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAttachment", new Type[] { typeof(string), typeof(string) });
            return (Task<AttachmentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IUserTaskRestService.GetAttachmentData(string id, string attachmentId)
        {
            var arguments = new object[] { id, attachmentId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAttachmentData", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DeleteAttachment(string id, string attachmentId)
        {
            var arguments = new object[] { id, attachmentId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAttachment", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<AttachmentInfo> IUserTaskRestService.AddAttachment(string id, PlainTextContent attachmentName, PlainTextContent attachmentDescription, PlainTextContent attachmentType, PlainTextContent url, AttachmentContent content)
        {
            var arguments = new object[] { id, attachmentName, attachmentDescription, attachmentType, url, content };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddAttachment", new Type[] { typeof(string), typeof(PlainTextContent), typeof(PlainTextContent), typeof(PlainTextContent), typeof(PlainTextContent), typeof(AttachmentContent) });
            return (Task<AttachmentInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<IdentityLink>> IUserTaskRestService.GetIdentityLinks(string id, string type)
        {
            var arguments = new object[] { id, type };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIdentityLinks", new Type[] { typeof(string), typeof(string) });
            return (Task<List<IdentityLink>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.AddIdentityLink(string id, IdentityLink identityLink)
        {
            var arguments = new object[] { id, identityLink };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddIdentityLink", new Type[] { typeof(string), typeof(IdentityLink) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DeleteIdentityLink(string id, IdentityLink identityLink)
        {
            var arguments = new object[] { id, identityLink };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteIdentityLink", new Type[] { typeof(string), typeof(IdentityLink) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DeleteVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteVariable", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<VariableValue> IUserTaskRestService.GetVariable(string id, string varName, bool deserializeValue)
        {
            var arguments = new object[] { id, varName, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariable", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<VariableValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IUserTaskRestService.GetVariables(string id, bool deserializeValues)
        {
            var arguments = new object[] { id, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVariables", new Type[] { typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IUserTaskRestService.GetBinaryVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryVariable", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.SetBinaryVariable(string id, string varName, BinaryDataContent data, ValueTypeContent valueType)
        {
            var arguments = new object[] { id, varName, data, valueType };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetBinaryVariable", new Type[] { typeof(string), typeof(string), typeof(BinaryDataContent), typeof(ValueTypeContent) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.ModifyVariables(string id, PatchVariables patch)
        {
            var arguments = new object[] { id, patch };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyVariables", new Type[] { typeof(string), typeof(PatchVariables) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.PutVariable(string id, string varName, VariableValue variable)
        {
            var arguments = new object[] { id, varName, variable };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutVariable", new Type[] { typeof(string), typeof(string), typeof(VariableValue) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.DeleteLocalVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteLocalVariable", new Type[] { typeof(string), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<VariableValue> IUserTaskRestService.GetLocalVariable(string id, string varName, bool deserializeValue)
        {
            var arguments = new object[] { id, varName, deserializeValue };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLocalVariable", new Type[] { typeof(string), typeof(string), typeof(bool) });
            return (Task<VariableValue>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Dictionary<string, VariableValue>> IUserTaskRestService.GetLocalVariables(string id, bool deserializeValues)
        {
            var arguments = new object[] { id, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLocalVariables", new Type[] { typeof(string), typeof(bool) });
            return (Task<Dictionary<string, VariableValue>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IUserTaskRestService.GetBinaryLocalVariable(string id, string varName)
        {
            var arguments = new object[] { id, varName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryLocalVariable", new Type[] { typeof(string), typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.SetBinaryLocalVariable(string id, string varName, BinaryDataContent data, ValueTypeContent valueType)
        {
            var arguments = new object[] { id, varName, data, valueType };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetBinaryLocalVariable", new Type[] { typeof(string), typeof(string), typeof(BinaryDataContent), typeof(ValueTypeContent) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.ModifyLocalVariables(string id, PatchVariables patch)
        {
            var arguments = new object[] { id, patch };
            var func = requestBuilder.BuildRestResultFuncForMethod("ModifyLocalVariables", new Type[] { typeof(string), typeof(PatchVariables) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IUserTaskRestService.PutLocalVariable(string id, string varName, VariableValue variable)
        {
            var arguments = new object[] { id, varName, variable };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutLocalVariable", new Type[] { typeof(string), typeof(string), typeof(VariableValue) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TaskCountByCandidateGroupResult>> IUserTaskRestService.GetTaskCountByCandidateGroup()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetTaskCountByCandidateGroup", new Type[] {  });
            return (Task<List<TaskCountByCandidateGroupResult>>)func(Client, arguments);
        }
    }
}

namespace Camunda.Api.Client.VariableInstance
{
    using Camunda.Api.Client.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIVariableInstanceRestService : IVariableInstanceRestService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIVariableInstanceRestService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<VariableInstanceInfo> IVariableInstanceRestService.Get(string variableInstanceId)
        {
            var arguments = new object[] { variableInstanceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<VariableInstanceInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<VariableInstanceInfo>> IVariableInstanceRestService.GetList(VariableInstanceQuery query, int? firstResult, int? maxResults, bool deserializeValues)
        {
            var arguments = new object[] { query, firstResult, maxResults, deserializeValues };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetList", new Type[] { typeof(VariableInstanceQuery), typeof(int?), typeof(int?), typeof(bool) });
            return (Task<List<VariableInstanceInfo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CountResult> IVariableInstanceRestService.GetListCount(VariableInstanceQuery query)
        {
            var arguments = new object[] { query };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetListCount", new Type[] { typeof(VariableInstanceQuery) });
            return (Task<CountResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IVariableInstanceRestService.GetBinaryVariable(string variableInstanceId)
        {
            var arguments = new object[] { variableInstanceId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBinaryVariable", new Type[] { typeof(string) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}
